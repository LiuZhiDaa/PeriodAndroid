package com.period.app.bean.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.period.app.bean.DatePhysiologyBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATE_PHYSIOLOGY_BEAN".
*/
public class DatePhysiologyBeanDao extends AbstractDao<DatePhysiologyBean, Long> {

    public static final String TABLENAME = "DATE_PHYSIOLOGY_BEAN";

    /**
     * Properties of entity DatePhysiologyBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CurrentDate = new Property(0, long.class, "currentDate", true, "_id");
        public final static Property CurrentState = new Property(1, int.class, "currentState", false, "CURRENT_STATE");
        public final static Property MIndexofPeriod = new Property(2, int.class, "mIndexofPeriod", false, "M_INDEXOF_PERIOD");
        public final static Property IsPeriodStart = new Property(3, boolean.class, "isPeriodStart", false, "IS_PERIOD_START");
        public final static Property IsPeriodEnd = new Property(4, boolean.class, "isPeriodEnd", false, "IS_PERIOD_END");
    }


    public DatePhysiologyBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DatePhysiologyBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATE_PHYSIOLOGY_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: currentDate
                "\"CURRENT_STATE\" INTEGER NOT NULL ," + // 1: currentState
                "\"M_INDEXOF_PERIOD\" INTEGER NOT NULL ," + // 2: mIndexofPeriod
                "\"IS_PERIOD_START\" INTEGER NOT NULL ," + // 3: isPeriodStart
                "\"IS_PERIOD_END\" INTEGER NOT NULL );"); // 4: isPeriodEnd
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATE_PHYSIOLOGY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DatePhysiologyBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCurrentDate());
        stmt.bindLong(2, entity.getCurrentState());
        stmt.bindLong(3, entity.getMIndexofPeriod());
        stmt.bindLong(4, entity.getIsPeriodStart() ? 1L: 0L);
        stmt.bindLong(5, entity.getIsPeriodEnd() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DatePhysiologyBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCurrentDate());
        stmt.bindLong(2, entity.getCurrentState());
        stmt.bindLong(3, entity.getMIndexofPeriod());
        stmt.bindLong(4, entity.getIsPeriodStart() ? 1L: 0L);
        stmt.bindLong(5, entity.getIsPeriodEnd() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public DatePhysiologyBean readEntity(Cursor cursor, int offset) {
        DatePhysiologyBean entity = new DatePhysiologyBean( //
            cursor.getLong(offset + 0), // currentDate
            cursor.getInt(offset + 1), // currentState
            cursor.getInt(offset + 2), // mIndexofPeriod
            cursor.getShort(offset + 3) != 0, // isPeriodStart
            cursor.getShort(offset + 4) != 0 // isPeriodEnd
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DatePhysiologyBean entity, int offset) {
        entity.setCurrentDate(cursor.getLong(offset + 0));
        entity.setCurrentState(cursor.getInt(offset + 1));
        entity.setMIndexofPeriod(cursor.getInt(offset + 2));
        entity.setIsPeriodStart(cursor.getShort(offset + 3) != 0);
        entity.setIsPeriodEnd(cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DatePhysiologyBean entity, long rowId) {
        entity.setCurrentDate(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DatePhysiologyBean entity) {
        if(entity != null) {
            return entity.getCurrentDate();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DatePhysiologyBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
